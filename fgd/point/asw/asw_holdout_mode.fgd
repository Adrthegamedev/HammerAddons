
@PointClass base(Targetname) 
	appliesto(ASW) = asw_holdout_mode: "If put into a map, this map will be played in holdout mode."
	[
	filename(string) : "Holdout Filename" : : "This is the filename of the holdout script that defines the waves, etc.  (assumes a path of 'resource\Holdout\')"

	// Inputs
	input UnlockResupply(void) : "Tells the holdout that you want to let the player resupply at the end of the round."

	// Outputs
	output OnAnnounceWave01(void) : "Fired when Wave01 is announced."
	output OnAnnounceWave02(void) : "Fired when Wave02 is announced."
	output OnAnnounceWave03(void) : "Fired when Wave03 is announced."
	output OnAnnounceWave04(void) : "Fired when Wave04 is announced."
	output OnAnnounceWave05(void) : "Fired when Wave05 is announced."
	output OnAnnounceWave06(void) : "Fired when Wave06 is announced."
	output OnAnnounceWave07(void) : "Fired when Wave07 is announced."
	output OnAnnounceWave08(void) : "Fired when Wave08 is announced."
	output OnAnnounceWave09(void) : "Fired when Wave09 is announced."
	output OnAnnounceWave10(void) : "Fired when Wave10 is announced."
	output OnAnnounceWaveDefault(void) : "Fired when any wave is announced."
	output OnWave01(void) : "Fired when Wave01 starts."
	output OnWave02(void) : "Fired when Wave02 starts."
	output OnWave03(void) : "Fired when Wave03 starts."
	output OnWave04(void) : "Fired when Wave04 starts."
	output OnWave05(void) : "Fired when Wave05 starts."
	output OnWave06(void) : "Fired when Wave06 starts."
	output OnWave07(void) : "Fired when Wave07 starts."
	output OnWave08(void) : "Fired when Wave08 starts."
	output OnWave09(void) : "Fired when Wave09 starts."
	output OnWave10(void) : "Fired when Wave10 starts."
	output OnWaveDefault(void) : "Fired at the start of all waves."
	]
