@SolidClass base(Targetname, Parentname, Origin, Angles, RenderFields, MasterEnt, compMinLight)
= momentary_rot_button: "A brush entity that's designed to be used for rotating wheels, " +
	"where the player can rotate them to arbitrary positions before stopping."
	[
	speed(float) : "Speed (deg/sec)" : 50 : "The amount, in degrees, that the wheel turns per second."

	sounds(choices) : "Sounds" : "0" =
		[
		0: "None"
		1: "Big zap & Warmup"
		2: "Access Denied"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		21: "Squeaky"
		22: "Squeaky Pneumatic"
		23: "Ratchet Groan"
		24: "Clean Ratchet"
		25: "Gas Clunk"
		]

	distance(float) : "Distance" : 90 : "The maximum amount, in degrees, that the wheel is allowed to rotate."
	returnspeed(float) : "Auto-return speed" : 0 : "If the 'Toggle' spawnflag is not set, " +
		"the speed at which the wheel auto-returns when left alone, in degrees per second."

	spawnflags(flags)  =
		[
		1: "Not Solid" : 1
		32: "Toggle (Disable Auto Return)" : 1
		64: "X Axis" : 0
		128: "Y Axis" : 0
		1024: "Use Activates" : 1
		2048: "Starts locked" : 0
		8192: "Jiggle when used while locked" : 0
		]

	startposition(float) : "Start Position" : "0" : "Postion when spawned. " +
		"The value is a range between 0.0 and 1.0, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."

	// From original FGD: Reverses upon USE, so are reversed here.
	startdirection[engine](integer): "Start Direction" : -1
	startdirection(choices) : "Start Direction" : -1 : "Specify the direction the button will move when first used. Ignored if Start Position is 0 or 1." =
		[
		-1: "Forward"
		1: "Backward"
		]

	solidbsp[ASW](boolean) : "Solid BSP" : 0 : "If set, use the SOLID_BSP collision type."

	glow[L4D](target_destination) : "Glow Entity" : : "The name of an entity that will get the +use glow for this button."

	// Inputs
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	input SetPosition(string) : "Move to a position. " +
		"The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."
	input SetPositionImmediately(string) : "Immediately teleport to a position. " +
		"The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."

	input _DisableUpdateTarget(void): "Prevent the Position output from firing. Used when lock jiggling is triggered."
	input _EnableUpdateTarget(void): "Allow the Position output to fire again. Used when lock jiggling is triggered."

	// Outputs
	output Position(integer) : "Fired whenever the button moves. " +
		"The output is the position of button from 0 to 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."
	output OnPressed(integer) : "Fired when the button is first pressed."
	output OnUnpressed(integer) : "Fired when the button is first released from being pressed."
	output OnFullyClosed(void) : "Fired when the button has reached position 1, the rotated position + 'Distance'."
	output OnFullyOpen(void) : "Fired when the button has reached position 0, the unrotated starting position."
	output OnReachedPosition(void) : "Fired whenever the button reaches a goal position: i.e. when it becomes open, becomes closed, " +
		"or reaches the point specified by a 'SetPosition' input."
	]
