@PointClass appliesto(MBase) 
	base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/math_generate.vmt") = math_generate :
	"Continuously generates numbers using various generation modes based on material proxies."
	[
	// Keys
	StartDisabled(boolean) : "Start Disabled" : 1

	GenerateType[engine](integer) : "Generation Type" : 1
	GenerateType(choices) : "Generation Type" : 1 =
	[
		0 : "Sine Wave (param 1 = time offset, param 2 = sine period)"
		1 : "Linear Ramp (param 1 = rate)"
		2 : "Uniform Noise"
		3 : "Gaussian Noise (param 1 = mean, param 2 = half width)"
		4 : "Exponential (param 1 = scale, param 2 = offset)"
	]
	
	InitialValue(float) : "Initial Value" : 0 : "Starting value for the math_generate."
	SetHitMin(float) : "Minimum Legal Value" : 0 : "Minimum legal value for generation."
	SetHitMax(float) : "Maximum Legal Value" : 1 : "Maximum legal value for generation."
	
	SetParam1(float) : "Parameter 1" : 0 : "Multi-purpose parameter #1 for the generation algorithms to use for their own needs."
	SetParam2(float) : "Parameter 2" : 0 : "Multi-purpose parameter #2 for the generation algorithms to use for their own needs."
	
	// Inputs
	input SetValue(float): "Sets the math_generate to a new value and fires the OutValue output with the result, performing all generation from that value."
	input SetValueNoFire(float): "Sets the math_generate to a new value without firing any outputs."
	input SetGenerateType(integer) : "Sets the type of generation this math_generate should perform."
	
	input Enable(void) : "Enables this entity."
	input Disable(void) : "Disables this entity."
	input Toggle(void) : "Toggles whether this entity is disabled."
	
	// Outputs
	output OutValue(string) : "Fires each tick while generation is active, passing the value continuously generated by the math_generate."
	]
